//max heap
import java.util.Arrays;
import java.util.Scanner;

class MaxHeap {
    int[] arr;
    int maxSize, heapSize;

    MaxHeap(int maxSize) {
        this.maxSize = maxSize;
        heapSize = 0;
        arr = new int[maxSize];
    }

    int parent(int i) {
        return (i - 1) / 2;
    }

    int lChild(int i) {
        return 2 * i + 1;
    }

    int rChild(int i) {
        return 2 * i + 2;
    }

    void MaxHeapify(int i) {
        int l = lChild(i);
        int r = rChild(i);
        int largest = i;

        if (l < heapSize && arr[l] > arr[i])
            largest = l;
        if (r < heapSize && arr[r] > arr[largest])
            largest = r;
        if (largest != i) {
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;
            MaxHeapify(largest);
        }
    }

    void removeMax() {
        if (heapSize <= 0) {
            System.out.println("Heap is empty");
            return;
        }
        if (heapSize == 1) {
            heapSize--;
            return;
        }
        arr[0] = arr[heapSize - 1];
        heapSize--;
        MaxHeapify(0);
    }

    int getMax() {
        return arr[0];
    }

    int curSize() {
        return heapSize;
    }

    void insertKey(int x) {
        if (heapSize == maxSize) {
            System.out.println("\nOverflow: Could not insertKey\n");
            return;
        }

        int i = heapSize;
        arr[i] = x;
        heapSize++;

        while (i != 0 && arr[parent(i)] < arr[i]) {
            int temp = arr[i];
            arr[i] = arr[parent(i)];
            arr[parent(i)] = temp;
            i = parent(i);
        }
    }

    public static void main(String[] args) {
        MaxHeap h = new MaxHeap(15);
        int elements[] = {3, 10, 12, 8, 2, 14};

        for (int e : elements)
            h.insertKey(e);

        System.out.println("The current size of the heap is " + h.curSize());
        System.out.println("The current maximum element is " + h.getMax());

        h.removeMax();
        System.out.println("The current size of the heap is " + h.curSize());

        // Inserting 2 new keys into the heap.
        h.insertKey(15);
        h.insertKey(5);


        System.out.println("The current size of the heap is " + h.curSize());
        System.out.println("The current maximum element is " + h.getMax());
    }
}  

//quicksort
public class QuickSort {

    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(array, low, high);
            quickSort(array, low, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, high);
        }
    }

    private static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;
                swap(array, i, j);
            }
        }
        swap(array, i + 1, high);
        return i + 1;
    }

    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public static void displayArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] array = { 56, 23, 78, 12, 34, 89, 45, 67, 90, 10 };

        System.out.println("Original Array:");
        displayArray(array);

        long startTime = System.nanoTime();
        quickSort(array, 0, array.length - 1);
        long endTime = System.nanoTime();

        System.out.println("\nSorted Array:");
        displayArray(array);

        System.out.println("\nExecution Time for Quick Sort: " + (endTime - startTime) + " nanoseconds");
    }
}     

//mergesort
public class MergeSort {

    public static void mergeSort(int[] array) {
        if (array.length < 2)
            return;
        int[] tempArray = new int[array.length];
        mergeSort(array, tempArray, 0, array.length - 1);
    }

    private static void mergeSort(int[] array, int[] tempArray, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;
            mergeSort(array, tempArray, left, middle);
            mergeSort(array, tempArray, middle + 1, right);
            merge(array, tempArray, left, middle, right);
        }
    }

    private static void merge(int[] array, int[] tempArray, int left, int middle, int right) {
        for (int i = left; i <= right; i++) {
            tempArray[i] = array[i];
        }
        int i = left, j = middle + 1, k = left;
        while (i <= middle && j <= right) {
            if (tempArray[i] <= tempArray[j]) {
                array[k++] = tempArray[i++];
            } else {
                array[k++] = tempArray[j++];
            }
        }
        while (i <= middle) {
            array[k++] = tempArray[i++];
        }
    }

    public static void displayArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] array = { 56, 23, 78, 12, 34, 89, 45, 67, 90, 10 };

        System.out.println("Original Array:");
        displayArray(array);

        long startTime = System.nanoTime();
        mergeSort(array);
        long endTime = System.nanoTime();

        System.out.println("\nSorted Array:");
        displayArray(array);

        System.out.println("\nExecution Time for Merge Sort: " + (endTime - startTime) + " nanoseconds");
    }
//BFS AL
import java.util.*;

public class BFSUsingAL {
    public static void bfs(int vertices, List<List<Integer>> adjacencyList, int start) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        visited[start] = true;
        queue.add(start);

        System.out.println("BFS Traversal:");
        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");

            for (int neighbor : adjacencyList.get(vertex)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        int vertices = 5;
        List<List<Integer>> adjacencyList = new ArrayList<>();
        
        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new ArrayList<>());
        }

        adjacencyList.get(0).add(1);
        adjacencyList.get(0).add(2);
        adjacencyList.get(1).add(3);
        adjacencyList.get(1).add(4);
        adjacencyList.get(2).add(4);

        bfs(vertices, adjacencyList, 0);
    }
}
//DFS AL
import java.util.*;

public class DFSUsingAL {
    public static void dfs(List<List<Integer>> adjacencyList, boolean[] visited, int vertex) {
        visited[vertex] = true;
        System.out.print(vertex + " ");

        for (int neighbor : adjacencyList.get(vertex)) {
            if (!visited[neighbor]) {
                dfs(adjacencyList, visited, neighbor);
            }
        }
    }

    public static void main(String[] args) {
        int vertices = 5;
        List<List<Integer>> adjacencyList = new ArrayList<>();

        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new ArrayList<>());
        }

        adjacencyList.get(0).add(1);
        adjacencyList.get(0).add(2);
        adjacencyList.get(1).add(3);
        adjacencyList.get(1).add(4);
        adjacencyList.get(2).add(4);

        boolean[] visited = new boolean[vertices];
        System.out.println("DFS Traversal:");
        dfs(adjacencyList, visited, 0);
    }
}
//BFSAM
import java.util.*;

class BFS_AM {
    static void bfs(int[][] adj, int start) {
        boolean[] visited = new boolean[5];
        List<Integer> q = new ArrayList<>();
        q.add(start);
        visited[start] = true;
        int vis;
        while (!q.isEmpty()) {
            vis = q.get(0);
            System.out.print(vis + " ");
            q.remove(q.get(0));
            for (int i = 0; i < 5; i++) {
                if (adj[vis][i] == 1 && (!visited[i])) {
                    q.add(i);
                    visited[i] = true;
                }
            }
        }
    }

    public static void main(String[] args) {
        int adj[][] = { { 0, 1, 1, 0, 0 }, { 1, 0, 1, 0, 0 }, { 0, 1, 0, 1, 1 },
                { 0, 0, 1, 0, 0 }, { 0, 0, 1, 0, 0 } };
        bfs(adj, 0);
    }
}


//DFS AM
import java.util.*;

public class DFSUsingAM {
    public static void dfs(int[][] adjacencyMatrix, boolean[] visited, int vertex) {
        visited[vertex] = true;
        System.out.print(vertex + " ");

        for (int i = 0; i < adjacencyMatrix.length; i++) {
            if (adjacencyMatrix[vertex][i] == 1 && !visited[i]) {
                dfs(adjacencyMatrix, visited, i);
            }
        }
    }

    public static void main(String[] args) {
        int[][] adjacencyMatrix = {
            {0, 1, 1, 0, 0},
            {1, 0, 0, 1, 1},
            {1, 0, 0, 0, 1},
            {0, 1, 0, 0, 1},
            {0, 1, 1, 1, 0}
        };

        boolean[] visited = new boolean[adjacencyMatrix.length];
        System.out.println("DFS Traversal:");
        dfs(adjacencyMatrix, visited, 0);
    }
}

//jobsequencing
import java.util.*;

class Job {
    int id, deadline, profit;

    Job(int id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }
}

public class JobSequencing {
    public static void jobScheduling(Job[] jobs) {
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit); // Sort by profit in descending order

        int maxDeadline = Arrays.stream(jobs).mapToInt(j -> j.deadline).max().orElse(0);
        boolean[] slots = new boolean[maxDeadline + 1]; // Ensure enough space
        List<Integer> scheduledJobs = new ArrayList<>();

        for (Job job : jobs) {
            for (int j = Math.min(maxDeadline, job.deadline); j > 0; j--) { // Start from job.deadline
                if (!slots[j]) { // Check if the slot is free
                    slots[j] = true;
                    scheduledJobs.add(job.id);
                    break;
                }
            }
        }

        System.out.println("Scheduled Jobs: " + scheduledJobs);
    }

    public static void main(String[] args) {
        jobScheduling(new Job[]{
                new Job(1, 4, 20),
                new Job(2, 1, 10),
                new Job(3, 1, 40),
                new Job(4, 1, 30),
                new Job(5, 3, 50)
        });
    }
}
//SSSP LIST
//singlesourceshortestpath list
import java.util.*;

class ShortestPathList {
    static class Node {
        int v, w;
        Node(int v, int w) { this.v = v; this.w = w; }
    }

    public static int[] dijkstra(int V, ArrayList<ArrayList<Node>> graph, int src) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> n.w));
        pq.add(new Node(src, 0));
        
        while (!pq.isEmpty()) {
            Node curr = pq.poll();
            for (Node n : graph.get(curr.v)) {
                if (dist[curr.v] + n.w < dist[n.v]) {
                    dist[n.v] = dist[curr.v] + n.w;
                    pq.add(new Node(n.v, dist[n.v]));
                }
            }
        }
        return dist;
    }

    public static void main(String[] args) {
        int V = 9;
        ArrayList<ArrayList<Node>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) graph.add(new ArrayList<>());
        int[][] edges = { {0,1,4}, {0,7,8}, {1,2,8}, {1,7,11}, {2,3,7}, {2,8,2}, {2,5,4}, {3,4,9}, {3,5,14}, {4,5,10}, {5,6,2}, {6,7,1}, {6,8,6}, {7,8,7} };
        for (int[] e : edges) { graph.get(e[0]).add(new Node(e[1], e[2])); graph.get(e[1]).add(new Node(e[0], e[2])); }
        
        int[] dist = dijkstra(V, graph, 0);
        System.out.println("Vertex Distance from Source");
        for (int i = 0; i < V; i++) System.out.println(i + " \t " + dist[i]);
    }
}

//SSSP MATRIX
//singlesourceshortestpath list
import java.util.*;

class ShortestPathList {
    static class Node {
        int v, w;
        Node(int v, int w) { this.v = v; this.w = w; }
    }

    public static int[] dijkstra(int V, ArrayList<ArrayList<Node>> graph, int src) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> n.w));
        pq.add(new Node(src, 0));
        
        while (!pq.isEmpty()) {
            Node curr = pq.poll();
            for (Node n : graph.get(curr.v)) {
                if (dist[curr.v] + n.w < dist[n.v]) {
                    dist[n.v] = dist[curr.v] + n.w;
                    pq.add(new Node(n.v, dist[n.v]));
                }
            }
        }
        return dist;
    }

    public static void main(String[] args) {
        int V = 9;
        ArrayList<ArrayList<Node>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) graph.add(new ArrayList<>());
        int[][] edges = { {0,1,4}, {0,7,8}, {1,2,8}, {1,7,11}, {2,3,7}, {2,8,2}, {2,5,4}, {3,4,9}, {3,5,14}, {4,5,10}, {5,6,2}, {6,7,1}, {6,8,6}, {7,8,7} };
        for (int[] e : edges) { graph.get(e[0]).add(new Node(e[1], e[2])); graph.get(e[1]).add(new Node(e[0], e[2])); }
        
        int[] dist = dijkstra(V, graph, 0);
        System.out.println("Vertex Distance from Source");
        for (int i = 0; i < V; i++) System.out.println(i + " \t " + dist[i]);
    }
}
